{
  "pages": {
    "home": "Inicio",
    "about": "Sobre",
    "resource": "Recursos"
  },
  "footer": {
    "section": {
      "menu": "Menu",
      "about_us": "Sobre",
      "badge": "Badges"
    },
    "shortDescription": "Este projeto demonstra a criação automatizada de uma arquitetura serverless na AWS com Terraform, um modelo escalável e de baixo custo. Ele serve como material prático para a certificação SAA-C03, mostrando uma implantação de site rápida e segura."
  },
  "home": {
    "title": "Bem-vindo ao Meu Site!",
    "subtitle": "Infraestrutura como Código com Terraform",
    "description": "Este é um projeto prático para a certificação AWS Solutions Architect - Associate.",
    "buttonPrimaryText": "Quero conhece-lo",
    "buttonPrimaryLink": "https://github.com/andresinho20049",
    "buttonSecondaryText": "Sobre o Projeto",
    "buttonSecondaryLink": "pt/about",
    "seeMore": {
      "title": "AWS SAA-C03 Hands-On",
      "description": "Este projeto demonstra uma arquitetura <strong>Cloud-Native</strong> para <span>aplicações web estáticas</span>. Utiliza <span>Next.js</span>, não em sua configuração padrão de SSR, mas no modo de <span>exportação estática</span>, garantindo que todos os componentes e páginas sejam pré-gerados como arquivos HTML, CSS e JavaScript. Essa estratégia elimina a necessidade de um servidor de aplicação, permitindo que a solução seja hospedada em um <span>bucket S3</span> de forma puramente <strong>serverless</strong>.<br/><br/>A infraestrutura é provisionada de forma automatizada via <span>Terraform (IaC)</span>, que configura o <span>S3</span>, o <span>CloudFront (CDN)</span> e o <span>Origin Access Control (OAC)</span> para garantir segurança e performance. O pipeline de <span>CI/CD</span> é gerenciado pelo <strong>GitHub Actions</strong>. A cada push, o workflow executa o Terraform, realiza o build do Next.js, sincroniza os arquivos estáticos com o S3 e invalida o cache do CloudFront. O resultado é um sistema de entrega contínua que garante implantações rápidas e seguras. A aplicação é servida globalmente através do CloudFront, oferecendo baixa latência e alta escalabilidade, com os arquivos protegidos e acessíveis apenas via OAC.",
      "buttonText": "Veja no GitHub",
      "buttonLink": "https://github.com/andresinho20049/terraform-aws-saa-c03-hands-on-app",
      "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Page-1.drawio.svg"
    }
  },
  "about": {
    "title": "Sobre o Projeto",
    "description": "Este projeto é uma demonstração prática para a certificação\n <strong>AWS Solutions Architect - Associate (SAA-C03)</strong>.\n\n Ele utiliza o Terraform para provisionar e gerenciar um site estático na AWS, utilizando serviços como S3 e CloudFront, que garantem alta escalabilidade e baixo custo sem a necessidade de gerenciar servidores.",
    "githubText": "Veja no GitHub",
    "githubLink": "https://github.com/andresinho20049/terraform-aws-saa-c03-hands-on-app"
  },
  "lang_switcher": {
    "label": "Idioma",
    "pt_link": "Português",
    "en_link": "English"
  },
  "sections_details": {
    "infra": {
      "title": "Estratégia de Infraestrutura",
      "description": "A infraestrutura é gerenciada com Terraform. Clique nos componentes abaixo para explorar como cada serviço é configurado.",
      "sections": {
        "browser": {
          "title": "Navegador",
          "description": "O ponto de partida de toda interação. O <strong>usuário</strong> acessa a aplicação através de uma URL, que é direcionada para a <strong>rede de distribuição de conteúdo (CDN)</strong> mais próxima para uma experiência rápida e responsiva.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Page-3.drawio.svg",
          "icon": "/icons/Chrome.svg"
        },
        "cdn": {
          "title": "CloudFront (CDN)",
          "description": "Atua como uma <strong>Content Delivery Network (CDN)</strong>, armazenando o conteúdo em cache em <strong>edge locations</strong> ao redor do mundo. Isso reduz a latência, aumenta a velocidade de carregamento e <strong>adiciona uma camada de segurança</strong>, como proteção contra ataques DDoS.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Page-4.drawio.svg",
          "icon": "/icons/CloudFront.svg"
        },
        "oac": {
          "title": "Origin Access Control (OAC)",
          "description": "O <strong>OAC</strong> estabelece uma comunicação segura e privada entre o <strong>CloudFront</strong> e o bucket <strong>S3</strong>. Ele garante que o S3 não precise ser público, permitindo que apenas a distribuição <strong>CloudFront</strong> autorizada acesse os arquivos.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Page-5.drawio.svg",
          "icon": "/icons/aws_iam.svg"
        },
        "s3": {
          "title": "S3 Bucket",
          "description": "O <strong>bucket S3</strong> hospeda todos os <strong>arquivos estáticos</strong> da aplicação <strong>(HTML, CSS, JavaScript)</strong> gerados pelo <strong>Next.js</strong>. É configurado para ser privado, com acesso restrito apenas ao <strong>CloudFront</strong> através do <strong>OAC</strong>, garantindo a segurança dos dados.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Page-6.drawio.svg",
          "icon": "/icons/s3.svg"
        },
        "github": {
          "title": "Github Actions",
          "description": "O <strong>Github Actions</strong> é utilizado para automatizar o processo de <strong>CI/CD</strong>. Ele executa o <strong>pipeline</strong> que inclui a construção do <strong>Next.js</strong>, provisiona a infraestrutura na <strong>AWS</strong> com <strong>Terraform</strong> e sincroniza os <strong>arquivos estáticos</strong> gerados no <strong>S3</strong>.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Page-7.drawio.svg",
          "icon": "/icons/GitHub-Actions.svg"
        }
      }
    },
    "ci": {
      "title": "Fluxo de CI/CD com GitHub Actions",
      "description": "A automação é o coração do projeto. O pipeline de CI/CD garante que cada alteração no código seja implantada de forma rápida e segura. Clique em cada etapa para ver os detalhes.",
      "sections": {
        "repository": {
          "title": "1. Push no Repositório",
          "description": "Um push para o <strong>repositório do GitHub</strong> aciona um pipeline de CI/CD. Esse fluxo de trabalho automatizado começa com o <strong>Terraform</strong> para provisionar e gerenciar a infraestrutura necessária. Em seguida, o pipeline executa um <strong>processo de build</strong> para compilar e preparar o aplicativo.",
          "imgSrc": "/others/github_workflow.png",
          "icon": "/icons/GitHub.svg"
        },
        "build": {
          "title": "2. Build do Next.js",
          "description": "O <strong>pipeline</strong> executa o comando <strong>`next build`</strong> com o <strong>NextConfig</strong> configurado o output como <strong>'export'</strong> para compilar a aplicação e <strong>gerar</strong> todos os <strong>arquivos estáticos</strong> na <strong>pasta `out/`</strong>. Esta etapa transforma o código-fonte em um <strong>site estático</strong> pronto para ser servido.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-NextBuild.drawio.svg",
          "icon": "/icons/Nextjs.svg"
        },
        "terraform": {
          "title": "3. Provisionar Infra (Terraform)",
          "description": "O <strong>Terraform</strong> é executado para planejar e aplicar as configurações de <strong>infraestrutura na AWS</strong>. Isso garante que o ambiente <strong>(S3, CloudFront, etc.)</strong> esteja sempre atualizado e em <strong>conformidade</strong> com o código definido no repositório.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Terraform.drawio.svg",
          "icon": "/icons/Terraform.svg"
        },
        "s3": {
          "title": "4. Sincronizar com S3",
          "description": "Os <strong>arquivos estáticos gerados na pasta `out/`</strong> são enviados para o <strong>bucket S3</strong> usando o AWS CLI. A sincronização garante que apenas os arquivos alterados sejam atualizados, tornando o processo de implantação rápido e eficiente.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-S3-Sync.drawio.svg",
          "icon": "/icons/s3.svg"
        },
        "cdn": {
          "title": "5. Invalidar Cache (CloudFront)",
          "description": "Após a sincronização dos arquivos, o <strong>cache do CloudFront é invalidado</strong>. Esta etapa crucial força a <strong>CDN</strong> a buscar a versão mais recente dos arquivos do <strong>S3</strong>, garantindo que os usuários vejam as atualizações imediatamente.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Page-7.drawio.svg",
          "icon": "/icons/CloudFront.svg"
        }
      }
    },
    "advantages": {
      "title": "Vantagens da Solução Serverless",
      "description": "Esta arquitetura <strong>Cloud-Native</strong> oferece benefícios significativos em custo, performance e segurança.",
      "sections": {
        "cost": {
          "title": "Baixo Custo Operacional",
          "description": "<strong>Sem servidores</strong> para gerenciar, o custo é baseado no uso, otimizando os gastos com infraestrutura.",
          "imgSrc": "",
          "icon": "/icons/manager-cost.svg"
        },
        "availability": {
          "title": "Alta Disponibilidade e Escalabilidade",
          "description": "A natureza distribuída do <strong>S3</strong> e <strong>CloudFront</strong> lida com picos de tráfego sem intervenção manual.",
          "imgSrc": "",
          "icon": "/icons/manager-ipo.svg"
        },
        "security": {
          "title": "Segurança Aprimorada",
          "description": "O <strong>acesso direto ao S3 é bloqueado</strong>, minimizando a superfície de ataque e protegendo os dados.",
          "imgSrc": "",
          "icon": "/icons/manager-dash.svg"
        }
      }
    }
  }
}
