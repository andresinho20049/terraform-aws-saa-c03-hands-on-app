{
  "pages": {
    "home": "Home",
    "about": "About",
    "resource": "Resources"
  },
  "footer": {
    "section": {
      "menu": "Menu",
      "about_us": "About",
      "badge": "Badges"
    },
    "shortDescription": "This project demonstrates the automated creation of a serverless architecture on AWS with Terraform, a scalable and low-cost model. It serves as practical material for the SAA-C03 certification, demonstrating fast and secure website deployment."
  },
  "home": {
    "title": "Welcome to My Website!",
    "subtitle": "Infrastructure as Code with Terraform",
    "description": "This is a hands-on project for the AWS Solutions Architect certification.",
    "buttonPrimaryText": "About Me",
    "buttonPrimaryLink": "https://github.com/andresinho20049",
    "buttonSecondaryText": "About the Project",
    "buttonSecondaryLink": "en/about",
    "seeMore": {
      "title": "AWS SAA-C03 Hands-On",
      "description": "This project demonstrates a <strong>Cloud-Native</strong> architecture for <span>static web</span> applications. It uses <span>Next.js</span>, not in its default SSR configuration, but in <span>static export</span> mode, ensuring that all components and pages are pre-generated as HTML, CSS, and JavaScript files. This strategy eliminates the need for an application server, allowing the solution to be hosted in an <span>S3 bucket</span> in a purely <strong>serverless</strong> manner.<br/><br/>The infrastructure is provisioned automatically via <span>Terraform (IaC)</span>, which configures <span>S3</span>, <span>CloudFront (CDN)</span>, and <span>Origin Access Control (OAC)</span> to ensure security and performance. The <span>CI/CD</span> pipeline is managed by <strong>GitHub Actions</strong>. With each push, the workflow executes Terraform, builds Next.js, syncs static files with S3, and invalidates the CloudFront cache. The result is a continuous delivery system that ensures fast and secure deployments. The application is served globally through CloudFront, offering low latency and high scalability, with files protected and accessible only via OAC.",
      "buttonText": "See on GitHub",
      "buttonLink": "https://github.com/andresinho20049/terraform-aws-saa-c03-hands-on-app",
      "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Page-1.drawio.svg"
    }
  },
  "about": {
    "title": "About the Project",
    "description": "This project is a practical demonstration for the <strong>AWS Solutions Architect - Associate (SAA-C03)</strong> certification.\n It uses Terraform to provision and manage a static website on AWS, using services such as S3 and CloudFront, which guarantee high scalability and low cost without the need to manage servers.",
    "githubText": "See on GitHub",
    "githubLink": "https://github.com/andresinho20049/terraform-aws-saa-c03-hands-on-app"
  },
  "resource": {
    "title": "Continuous Delivery Pipeline<br/> for Static Sites",
    "description": "Boost your development process efficiency with a complete end-to-end automation. Our pipeline was meticulously designed to transform a <strong>Next.js</strong> project's source code into a static site and then deploy it to <strong>AWS</strong>. The process is fully automated using <strong>GitHub Actions</strong>, which manages every step, from the <strong>build</strong> to the <strong>infrastructure provisioning</strong> with <strong>Terraform</strong>, ensuring changes are published quickly and with zero manual intervention. This approach not only enhances delivery speed but also maintains consistency and security in every deployment.",
    "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Page-2.drawio.svg",
    "subtitle": "Explore Other Resources",
    "descriptionResources": "Welcome to my learning journey for the <strong>AWS Certified Solutions Architect</strong> certification.<br/><br/> This section features a portfolio of technical projects that go beyond theory, tackling real-world practical challenges.<br/>Each project uses <strong>Terraform</strong> to provision and manage infrastructure, reinforcing best practices for Infrastructure as Code <strong>(IaC)</strong>.<br/> You'll see examples of how I've provisioned a variety of architectures, from <strong>serverless</strong> solutions, which eliminate the need for server management, to <strong>provisioned architectures</strong> that use services like VPC, EC2, EFS, and Application Load Balancer to ensure high availability and resilience.<br/><br/>These works are a tangible demonstration of my skills in cloud solution design, implementation, and automation, serving as a practical foundation for the certification.",
    "resourcesList": [
      {
        "title": "AWS Infrastructure with Terraform",
        "description": "This project is a hands-on lab that uses <strong>Terraform, Packer, and Shell Script</strong> to automate the creation of a scalable and secure AWS infrastructure. It simulates a web application in distinct environments <strong>(dev, prod)</strong>, with a Load Balancer and Autoscaling.\n\n The project highlights the creation of custom AMIs, VPCs, Load Balancers, and autoscaling groups, validating technical skills in cloud automation and architecture.",
        "cardTitle": "VPC, ALB, ASG, and EFS",
        "imgSrc": "/diagram/terraform-aws-with-autoscaling-course.drawio.svg",
        "link": "https://github.com/andresinho20049/terraform-aws-with-autoscaling-course"
      },
      {
        "title": "Terraform and GitHub Actions",
        "description": "This project offers a robust solution for managing and provisioning infrastructure on Amazon Web Services (AWS) using <strong>Terraform</strong>, with an automated <strong>Continuous Integration/Continuous Deployment (CI/CD)</strong> pipeline via GitHub Actions.",
        "cardTitle": "Github Actions",
        "imgSrc": "/diagram/terraform-pipeline-with-github-actions.drawio.svg",
        "link": "https://github.com/andresinho20049/terraform-pipeline-with-github-actions"
      },
      {
        "title": "Lovable + AWS Amplify (VFS Castanhas)",
        "description": "The VFS Castanhas project is a practical study of <strong>serverless</strong> architecture on AWS. Developed with the <strong>AWS Amplify CLI</strong>, it demonstrates the building of a complete application, which includes a landing page with a chatbot and a restricted access console. The solution integrates services like <span>API Gateway, Lambda, and DynamoDB</span>, in addition to using <strong>Amazon Bedrock</strong> for <strong>AI</strong> functionalities. User and group management is handled via <strong>Cognito</strong>, allowing for secure and integrated authentication with external providers like Google.",
        "cardTitle": "AWS Amplify",
        "imgSrc": "/diagram/vfs-castanhas-landing-page.drawio.png",
        "link": "https://github.com/andresinho20049/vfs-castanhas-landing-page"
      },
      {
        "title": "ECS (Fargate)",
        "description": "This project is a practical study of infrastructure as code with a focus on <strong>microservices and containers</strong> on AWS. It uses <strong>Terraform</strong> to provision a complete and scalable architecture with <strong>ECS (Elastic Container Service)</strong>. The project includes a high-availability cluster, services with their own task definitions, and the use of <strong>ECR (Elastic Container Registry)</strong> to manage container images, as well as <strong>Application Load Balancers (ALBs)</strong> for traffic distribution.",
        "cardTitle": "ECS (Fargate)",
        "imgSrc": "/diagram/iac-aws-ecs-with-terraform.drawio.svg",
        "link": "https://github.com/andresinho20049/iac-aws-ecs-with-terraform"
      }
    ],
    "contentPreview": {
      "title": "Study Path and Resources",
      "description": "This section documents the learning journey and skills validation for the <strong>AWS Solutions Architect</strong> certification. Here, you can view my progress, mock exam results, and certificates acquired along the way.",
      "contents": {
        "certifiedAndreIacono": {
          "title": "AWS Solutions Architect Study",
          "description": "Certificate of course completion in the study path for the AWS Solutions Architect certification <span>SAA-C03</span>, a fundamental step in the Cloud journey and aligned with the study paths officially recommended by the team on the Udemy platform.",
          "imgSrc": "/qualifications/UC-08e1b42d-a5cf-4983-b7e1-474b67c03a4c.jpg",
          "linkText": "View Certificate",
          "linkUrl": "/qualifications/UC-08e1b42d-a5cf-4983-b7e1-474b67c03a4c.pdf"
        },
        "simulatedExamOne": {
          "title": "Mock Exam 1",
          "description": "Result of the first mock exam for the Solutions Architect <span>SAA-C03</span> certification. The exam focused on questions that simulate real-world business scenarios, presenting various use cases. <br />Exam taken on the Udemy study path.",
          "imgSrc": "/qualifications/SAA-C03_01.png",
          "linkText": "View Result",
          "linkUrl": "/qualifications/SAA-C03_01.png"
        },
        "simulatedExamTwo": {
          "title": "Mock Exam 2",
          "description": "Results of the second mock exam for the Solutions Architect certification <span>SAA-C03</span>. The exam was taken on a study path recommended by the team for the Cloud Journey, focusing on questions that require an in-depth understanding of AWS services and architectures.",
          "imgSrc": "/qualifications/SAA-C03_02.png",
          "linkText": "View Result",
          "linkUrl": "/qualifications/SAA-C03_02.png"
        },
        "certifiedCloudPractitioner": {
          "title": "AWS Cloud Practitioner",
          "description": "Cloud Planner certification that validates fundamental and comprehensive knowledge of the AWS Cloud. The certification attests proficiency in four main domains: <span>Cloud Concepts</span>, <span>Security and Compliance</span>, <span>Technology</span>, and <span>Billing/Pricing</span>.",
          "imgSrc": "/qualifications/LNXXN2TK9JR113SD.png",
          "linkText": "View Certificate",
          "linkUrl": "/qualifications/LNXXN2TK9JR113SD.pdf"
        }
      }
    },
    "conclusion": {
      "title": "Conclusion: A Summary of the Cloud Architecture Journey",
      "description": "This project is the culmination of a continuous learning journey, applying theory and practice to demonstrate proficiency in AWS Cloud architecture and automation. The solution, built with <strong>Infrastructure as Code</strong> and a robust <strong>CI/CD</strong> pipeline, reflects a modern approach to development and operations.",
      "certification": {
        "title": "Study Path",
        "description": "The journey is complemented by an in-depth study for the Solutions Architect certification, with mock exams and certificates that validate practical and theoretical knowledge.\n\nIn addition to the practical projects developed, studying for the <strong>AWS Solutions Architect</strong> certification through learning paths consolidates theoretical knowledge. This combination of direct application in projects and following paths on the Udemy platform is a fundamental step in the Cloud journey.\n\nTheory is validated through mock exams that replicate the test format, while practice is solidified with tangible projects.",
        "cardTitle": "Still Learning",
        "imgSrc": "/qualifications/UC-08e1b42d-a5cf-4983-b7e1-474b67c03a4c.jpg",
        "mainLinkText": "Home",
        "mainLinkUrl": "/en",
        "secondLinkText": "About",
        "secondLinkUrl": "/en/about"
      },
      "cards": {
        "iac_infra": {
          "title": "Infrastructure as Code and IaaS",
          "description": "The foundation of our solution is <strong>Terraform</strong>, which along with <strong>Packer</strong> and Shell Script, enabled the secure and scalable provisioning of infrastructure, including projects with <strong>EC2, ECS Fargate</strong> and state management.",
          "icon": "/icons/Terraform.svg"
        },
        "solucoes_modernas": {
          "title": "Serverless Solutions and Containers",
          "description": "We explored modern architectures with <strong>Next.js export</strong> for a static website on <strong>S3/CloudFront</strong>. In parallel, the <strong>AWS Amplify</strong> and <strong>ECS Fargate</strong> projects demonstrate proficiency in serverless and microservices architectures.",
          "icon": "/icons/CloudFront.svg"
        },
        "automacao_devops": {
          "title": "Automation and DevOps (CI/CD)",
          "description": "The pipeline's efficiency is guaranteed by <strong>GitHub Actions</strong>, which automates the build, validation, and deployment process, showcasing a commitment to <strong>DevOps and CI/CD</strong> practices.",
          "icon": "/icons/GitHub-Actions.svg"
        }
      }
    }
  },
  "lang_switcher": {
    "label": "Language",
    "pt_link": "Portuguese",
    "en_link": "English"
  },
  "sections_details": {
    "infra": {
      "title": "Infrastructure Strategy",
      "description": "The infrastructure is managed with Terraform. Click on the components below to explore how each service is configured.",
      "sections": {
        "browser": {
          "title": "Browser",
          "description": "The starting point of all interactions. The <strong>user</strong> accesses the application through a URL, which is directed to the nearest <strong>Content Delivery Network (CDN)</strong> for a fast and responsive experience.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Page-3.drawio.svg",
          "icon": "/icons/Chrome.svg"
        },
        "cdn": {
          "title": "CloudFront (CDN)",
          "description": "Acts as a <strong>Content Delivery Network (CDN)</strong>, caching content at <strong>edge locations</strong> around the world. This reduces latency, increases loading speed, and <strong>adds a layer of security</strong>, such as protection against DDoS attacks.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Page-4.drawio.svg",
          "icon": "/icons/CloudFront.svg"
        },
        "oac": {
          "title": "Origin Access Control (OAC)",
          "description": "<strong>OAC</strong> establishes secure and private communication between <strong>CloudFront</strong> and the <strong>S3</strong> bucket. It ensures that S3 does not need to be public, allowing only the authorized <strong>CloudFront</strong> distribution to access files.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Page-5.drawio.svg",
          "icon": "/icons/aws_iam.svg"
        },
        "s3": {
          "title": "S3 Bucket",
          "description": "The <strong>S3 bucket</strong> hosts all <strong>static files</strong> of the application <strong>(HTML, CSS, JavaScript)</strong> generated by <strong>Next.js</strong>. It is configured to be private, with access restricted only to <strong>CloudFront</strong> via <strong>OAC</strong>, ensuring data security.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Page-6.drawio.svg",
          "icon": "/icons/s3.svg"
        },
        "github": {
          "title": "Github Actions",
          "description": "<strong>GitHub Actions</strong> is used to automate the <strong>CI/CD</strong> process. It executes the <strong>pipeline</strong> that includes building <strong>Next.js</strong>, provisioning the infrastructure on <strong>AWS</strong> with <strong>Terraform</strong>, and synchronizing the generated <strong>static files</strong> to <strong>S3</strong>.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Page-7.drawio.svg",
          "icon": "/icons/GitHub-Actions.svg"
        }
      }
    },
    "ci": {
      "title": "CI/CD Flow with GitHub Actions",
      "description": "Automation is the heart of the project. The CI/CD pipeline ensures that every code change is deployed quickly and safely. Click each step to see the details.",
      "sections": {
        "repository": {
          "title": "1. Push to Repository",
          "description": "A push to the <strong>GitHub repository</strong> triggers a CI/CD pipeline. This automated workflow starts with <strong>Terraform</strong> to provision and manage the necessary infrastructure. Following this, the pipeline executes a <strong>build process</strong> to compile and prepare the application, ensuring a seamless and efficient deployment.",
          "imgSrc": "/others/github_workflow.png",
          "icon": "/icons/GitHub.svg"
        },
        "build": {
          "title": "2. Next.js Build",
          "description": "The <strong>pipeline</strong> runs the <strong>`next build`</strong> command with <strong>NextConfig</strong> setting the output to <strong>'export'</strong> to compile the application and <strong>generate</strong> all <strong>static files</strong> in the <strong>`out/` folder</strong>. This step transforms the source code into a <strong>static website</strong> ready to be served.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-NextBuild.drawio.svg",
          "icon": "/icons/Nextjs.svg"
        },
        "terraform": {
          "title": "3. Provision Infra (Terraform)",
          "description": "<strong>Terraform</strong> is used to plan and apply <strong>infrastructure configurations in AWS</strong>. This ensures that the environment <strong>(S3, CloudFront, etc.)</strong> is always up-to-date and <strong>compliant</strong> with the code defined in the repository.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Terraform.drawio.svg",
          "icon": "/icons/Terraform.svg"
        },
        "s3": {
          "title": "4. Sync with S3",
          "description": "<strong>Static files generated in the `out/` folder</strong> are pushed to the <strong>S3 bucket</strong> using the AWS CLI. Synchronization ensures that only changed files are updated, making the deployment process fast and efficient.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-S3-Sync.drawio.svg",
          "icon": "/icons/s3.svg"
        },
        "cdn": {
          "title": "5. Invalidate Cache (CloudFront)",
          "description": "After the files are synced, the <strong>CloudFront cache is invalidated</strong>. This crucial step forces the <strong>CDN</strong> to fetch the latest version of the files from <strong>S3</strong>, ensuring that users see updates immediately.",
          "imgSrc": "/diagram/terraform-aws-saa-c03-hands-on-app-Page-7.drawio.svg",
          "icon": "/icons/CloudFront.svg"
        }
      }
    },
    "advantages": {
      "title": "Advantages of Serverless Solution",
      "description": "This <strong>Cloud-Native</strong> architecture offers significant benefits in cost, performance and security.",
      "sections": {
        "cost": {
          "title": "Low Operating Cost",
          "description": "With <strong>no servers</strong> to manage, costs are based on usage, optimizing infrastructure spending.",
          "icon": "/icons/manager-cost.svg"
        },
        "availability": {
          "title": "High Availability and Scalability",
          "description": "The distributed nature of <strong>S3</strong> and <strong>CloudFront</strong> handles traffic spikes without manual intervention.",
          "icon": "/icons/manager-ipo.svg"
        },
        "security": {
          "title": "Enhanced Security",
          "description": "<strong>Direct access to S3 is blocked</strong>, minimizing the attack surface and protecting data.",
          "icon": "/icons/manager-dash.svg"
        }
      }
    }
  }
}
